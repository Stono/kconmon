apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kconmon
  labels:
{{ include "kconmon.app.labels.standard" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app: kconmon
      component: agent
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: kconmon
        component: agent
    spec:
      terminationGracePeriodSeconds: 15
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        searches:
        - {{ .Release.Namespace }}.svc.cluster.local
        - svc.cluster.local
        - cluster.local
{{ if $.Values.config.nodeAntiAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
{{- range $object := ($.Values.config.nodeAntiAffinity) }}
            - matchExpressions:
              - key: {{ $object.key }}
                operator: NotIn
                values:
                - "{{ $object.value }}"
{{ end }}
{{ end }}

{{ if $.Values.enableTcpTweaks }}
      initContainers:
      - name: sysctls
        command:
        - /bin/sh
        - -c
        - |
          # TCP Connection Tweaks
          sysctl -w net.core.somaxconn=32768
          sysctl -w net.ipv4.tcp_fin_timeout=60
          sysctl -w net.ipv4.tcp_keepalive_time=30
          sysctl -w net.ipv4.tcp_keepalive_intvl=30
          sysctl -w net.ipv4.tcp_keepalive_probes=3
          sysctl -w net.ipv4.tcp_window_scaling=1
          sysctl -w net.ipv4.tcp_max_syn_backlog=3240000
          sysctl -w net.ipv4.tcp_timestamps=0
          sysctl -w net.ipv4.tcp_sack=0
          sysctl -w net.ipv4.tcp_fack=0
        imagePullPolicy: IfNotPresent
        image: "{{ required "Please specify the docker image" .Values.docker.image }}:{{ .Values.docker.tag | default .Chart.Version }}"
        securityContext:
          privileged: true
          runAsUser: 0
{{ end }}

      containers:
      - name: agent
        image: "{{ required "Please specify the docker image" .Values.docker.image }}:{{ .Values.docker.tag | default .Chart.Version }}"
        imagePullPolicy: IfNotPresent
        args:
        - agent
        env:
        - name: CONTAINER_RESOURCE_REQUEST_MEMORY
          valueFrom:
            resourceFieldRef:
              divisor: "0"
              resource: requests.memory
        - name: CONTAINER_RESOURCE_LIMIT_MEMORY
          valueFrom:
            resourceFieldRef:
              divisor: "0"
              resource: limits.memory
        - name: DEPLOYMENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG
          value: {{ $.Values.config | toJson | quote }}
        ports:
        - name: http-web
          containerPort: 8080
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          failureThreshold: 1
          httpGet:
            path: /readiness
            port: 8080
        resources:
          requests:
            cpu: {{ required "Please set the agent cpu" $.Values.resources.agent.cpu }}
            memory: {{ $.Values.resources.agent.memory | default "45Mi" }}
          limits:
            memory: 128Mi
      tolerations:
      - effect: NoSchedule
        operator: Exists
